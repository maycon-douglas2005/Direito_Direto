@* Remova esta seção se estiver usando agrupamento *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Redefinição de senha";

    var passwordResetToken = Request.Form["resetToken"] ?? Request.QueryString["resetToken"];

    bool tokenExpired = false;
    bool isSuccess = false;

    // Configurar validação
    Validation.RequireField("newPassword", "O campo nova senha é obrigatório.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("newPassword", "A nova senha e a senha de confirmação não são equivalentes."));
    Validation.RequireField("passwordResetToken", "O token de redefinição de senha é obrigatório.");
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "A nova senha deve ter ao menos 6 caracteres"));

    if (IsPost && Validation.IsValid()) {
        AntiForgery.Validate();
        var newPassword = Request["newPassword"];
        var confirmPassword = Request["confirmPassword"];

        if (WebSecurity.ResetPassword(passwordResetToken, newPassword)) {
            isSuccess = true;
        } else {
            ModelState.AddError("passwordResetToken", "O token de redefinição de senha é inválido.");
            tokenExpired = true;
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Use o formulário abaixo para redefinir a sua senha.</h2>
</hgroup>

@if (!WebMail.SmtpServer.IsEmpty()) {
    if (!Validation.IsValid()) {
        <p class="validation-summary-errors">
            @if (tokenExpired) {
                <text>O token de redefinição de senha está incorreto ou expirou. Visite a <a href="~/Account/ForgotPassword">página esqueci a senha</a> 
                para gerar uma nova senha.</text>
            } else {
                <text>Não foi possível redefinir a senha. Corrija os erros e tente novamente.</text>
            }
        </p>
    }

    if (isSuccess) {
        <p class="message-success">
            Senha alterada! Clique <a href="~/Account/Login" title="Logon">aqui</a> para fazer o logon.
        </p>
    }

    <form method="post">
        @AntiForgery.GetHtml()
        <fieldset>
            <legend>Formulário de Alteração de Senha</legend>
            <ol>
                <li class="new-password">
                    <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) {<text>class="error-label"</text>}>Nova senha</label> 
                    <input type="password" id="newPassword" name="newPassword" disabled="@isSuccess" @Validation.For("newPassword") />
                    @Html.ValidationMessage("newPassword")
                </li>
                <li class="confirm-password">
                    <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirmar senha</label> 
                    <input type="password" id="confirmPassword" name="confirmPassword" disabled="@isSuccess" @Validation.For("confirmPassword") />
                    @Html.ValidationMessage("confirmPassword")
                </li>
                <li class="reset-token">
                    <label for="resetToken" @if (!ModelState.IsValidField("resetToken")) {<text>class="error-label"</text>}>Password reset token</label> 
                    <input type="text" id="resetToken" name="resetToken" value="@passwordResetToken" disabled="@isSuccess" @Validation.For("resetToken") />
                    @Html.ValidationMessage("resetToken")
                </li>
            </ol>
            <input type="submit" value="Redefinir senha" disabled="@isSuccess"/>
        </fieldset>
    </form>
} else {
    <p class="message-info">
        A recuperação de senha foi desabilitada para este website, pois o servidor SMTP não 
        está configurado corretamente. Entre em contato com o proprietário do site para redefinir 
        sua senha.
    </p>
}
